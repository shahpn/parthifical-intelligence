import tensorflow as tf
import numpy as np

# Define the categories we want to classify user input into
categories = ['history', 'location', 'courses', 'advising']

# Define the training data for each category
history_data = ["Campus history", "University history", "Founding of the campus/university", "Campus founders", "Historical events on campus", "Campus traditions", "University traditions", "Historical buildings on campus", "Historical landmarks on campus", "Campus archives", "University archives", "Historical collections", "Campus museums", "Campus art galleries", "Historical exhibits", "Campus tours", "Campus history tours", "University history tours", "Historical markers on campus", "Historical plaques on campus", "Historical statues on campus", "Historical murals on campus", "Historical documents", "Historical photos", "Historical yearbooks", "Historical newspapers", "Historical books", "Historical articles", "Campus growth", "Campus expansion", "University growth", "University expansion", "Campus demographics", "University demographics", "Campus population", "University population", "Campus diversity", "University diversity", "Campus pioneers", "University pioneers", "Campus community", "University community", "Campus culture", "University culture", "Campus values", "University values", "Campus mission", "University mission", "Campus philosophy", "University philosophy", "Campus presidents", "University presidents", "Campus provosts", "University provosts", "Campus deans", "University deans", "Campus faculty", "University faculty", "Campus alumni", "University alumni", "Campus achievements", "University achievements", "Campus accomplishments", "University accomplishments", "Campus accolades", "University accolades", "Campus awards", "University awards", "Campus rankings", "University rankings", "Campus honors", "University honors", "Campus history books", "University history books", "Campus history courses", "University history courses", "Campus history degrees", "University history degrees", "Campus history clubs", "University history clubs", "Campus history organizations", "University history organizations", "Campus historical research", "University historical research", "Campus historical projects", "University historical projects", "Campus historical archives", "University historical archives", "Campus historical publications", "University historical publications", "Campus historical documentaries", "University historical documentaries", "Campus historical films", "University historical films", "Campus historical events", "University historical events", "Campus historical speakers", "University historical speakers", "Campus historical exhibits", "University historical exhibits"]
location_data = ["Campus map", "Building directory", "Building layout", "Campus directory", "Campus navigation", "Room numbers", "Building codes", "Campus landmarks", "Campus tours", "Building floor plans", "Building accessibility", "Building amenities", "Building hours", "Building entrances", "Building exits", "Building elevators", "Building stairs", "Building signage", "Building maintenance", "Building security", "Building technology", "Building services", "Building history", "Campus events", "Campus locations", "Campus transportation", "Campus parking", "Campus shuttles", "Campus walkways", "Campus pathways", "Campus green spaces", "Campus attractions", "Campus libraries", "Campus archives", "Campus museums", "Campus art galleries", "Campus theaters", "Campus concert halls", "Campus sports facilities", "Campus recreation centers", "Campus fitness centers", "Campus swimming pools", "Campus fields", "Campus tennis courts", "Campus basketball courts", "Campus volleyball courts", "Campus soccer fields", "Campus running tracks", "Campus bike racks", "Campus dining halls", "Campus cafes", "Campus food trucks", "Campus convenience stores", "Campus bookstores", "Campus copy centers", "Campus mailrooms", "Campus housing", "Campus residence halls", "Campus apartments", "Campus off-campus housing", "Campus commuter services", "Campus bus schedules", "Campus student center", "Campus club offices", "Campus career center", "Campus counseling center", "Campus health center", "Campus emergency services", "Campus police", "Campus parking services", "Campus visitor center", "Campus admissions office", "Campus financial aid office", "Campus registrar's office", "Campus academic advising", "Campus tutoring services", "Campus disability services", "Campus international student services", "Campus study abroad office", "Campus research facilities", "Campus laboratory facilities", "Campus computing facilities", "Campus conference rooms", "Campus lecture halls", "Campus classrooms", "Campus seminar rooms", "Campus breakout rooms", "Campus study spaces", "Campus quiet zones", "Campus collaboration spaces", "Campus presentation rooms", "Campus video conferencing rooms", "Campus audio recording booths", "Campus green screens", "Campus equipment rentals", "Campus printing services", "Campus scanning services", "Campus projectors", "Campus AV equipment", "Campus tech support"]
course_data = ["Course catalog", "Course selection", "Course offerings", "Course prerequisites", "Course schedule", "Degree requirements", "General education", "Elective courses", "Academic advising", "Enrollment", "Waitlist", "Drop/Add", "Credit hours", "GPA", "Grade requirements", "Pass/Fail", "Online courses", "Hybrid courses", "Summer courses", "Independent study", "Study abroad", "Internships", "Experiential learning", "Service-learning", "Writing-intensive courses", "Research opportunities", "Honors courses", "Advanced placement", "Dual enrollment", "Transfer credits", "Course syllabus", "Textbooks", "Course evaluations", "Peer review", "Course load", "Class size", "Course difficulty", "Course format", "Course delivery", "Course topics", "Course goals", "Course objectives", "Course outcomes", "Course requirements", "Coursework", "Seminar courses", "Lab courses", "Lecture courses", "Discussion-based courses", "Group projects", "Individual projects", "Class participation", "Attendance policies", "Office hours", "Study groups", "Tutoring", "Academic support services", "Career services", "Graduation requirements", "Academic policies", "Student success", "Time management", "Course registration", "Course withdrawal", "Course planning", "Course progression", "Course sequencing", "Course evaluation", "Course sequencing", "Course waitlists", "Course availability", "Course choices", "Course descriptions", "Course outlines", "Course pre-requisites", "Course assessments", "Course evaluations", "Course feedback", "Course reviews", "Course ratings", "Course selection guides", "Course timetables", "Course timetables", "Course availability", "Course attendance", "Course scheduling", "Course planning", "Course enrollment", "Course registration", "Course selection tools", "Course finder", "Course filter", "Course search", "Course recommendations", "Course ranking", "Course ratings", "Course advice", "Course guidance", "Course selection tips", "Course selection resources"]
advising_data = ["Course advising", "Professor help", "Academic advising", "Major advising", "Course selection", "Class selection", "Degree planning", "Major planning", "Degree requirements", "Major requirements", "Academic requirements", "Course prerequisites", "Class prerequisites", "Course availability", "Class availability", "Course schedules", "Class schedules", "Course workload", "Class workload", "Course difficulty", "Class difficulty", "Course grading", "Class grading", "Course credit", "Class credit", "Course curriculum", "Class curriculum", "Course textbooks", "Class textbooks", "Course instructors", "Class instructors", "Course professors", "Class professors", "Professor ratings", "Professor reviews", "Professor evaluations", "Office hours", "Tutoring", "Study groups", "Academic success", "GPA improvement", "Study skills", "Time management", "Test taking strategies", "Essay writing help", "Research paper help", "Academic accommodations", "Disability services", "Academic support", "Academic resources", "Academic coaching", "Academic mentoring", "Study abroad advising", "Internship advising", "Career advising", "Job search help", "Interview skills", "Resume writing help", "Cover letter writing help", "Networking", "Professional development", "Graduate school advising", "Graduate school applications", "Scholarship advising", "Financial aid advising", "Student loans", "FAFSA", "College affordability", "Student support services", "Mental health services", "Counseling services", "Student success workshops", "Student organizations", "Campus involvement", "Community service opportunities", "Volunteer opportunities", "Campus employment", "Internship opportunities", "Career fairs", "Career workshops", "Alumni network", "Professional networking events", "Continuing education", "Non-degree seeking options", "Dual enrollment options", "Study abroad opportunities", "Research opportunities", "Extracurricular activities", "Leadership opportunities", "Public speaking help", "Debate team", "Model UN", "Mock trial", "Writing center", "Math center", "Science center", "Foreign language center", "Technology center", "Library resources", "Academic misconduct policies"]


# Preprocess the training data by converting each word to a vector
tokenizer = tf.keras.preprocessing.text.Tokenizer()
tokenizer.fit_on_texts(history_data + location_data + course_data + advising_data)
history_data = tokenizer.texts_to_sequences(history_data)
location_data = tokenizer.texts_to_sequences(location_data)
course_data = tokenizer.texts_to_sequences(course_data)
advising_data = tokenizer.texts_to_sequences(advising_data)

# Convert the lists of sequences to a 2D numpy array
history_data = tf.keras.preprocessing.sequence.pad_sequences(history_data, maxlen=10)
location_data = tf.keras.preprocessing.sequence.pad_sequences(location_data, maxlen=10)
course_data = tf.keras.preprocessing.sequence.pad_sequences(course_data, maxlen=10)
advising_data = tf.keras.preprocessing.sequence.pad_sequences(advising_data, maxlen=10)

# Define the neural network model
model = tf.keras.models.Sequential([
    tf.keras.layers.Embedding(len(tokenizer.word_index)+1, 64, input_length=10),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(len(categories), activation='softmax')
])

# Compile the model
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Train the model on the training data
X = np.concatenate((history_data, location_data, course_data, advising_data), axis=0)
y = np.array([[1, 0, 0, 0]] * len(history_data) + 
             [[0, 1, 0, 0]] * len(location_data) + 
             [[0, 0, 1, 0]] * len(course_data) + 
             [[0, 0, 0, 1]] * len(advising_data))
model.fit(X, y, epochs=50)

# Define a function to classify user input
def classify_input(input_text):
    input_sequence = tokenizer.texts_to_sequences([input_text])
    input_sequence = tf.keras.preprocessing.sequence.pad_sequences(input_sequence, maxlen=10)
    category_index = np.argmax(model.predict(input_sequence))
    return categories[category_index]

# Test the function
input_text = "I need help reaching out to my Professor"
print(classify_input(input_text))  # Output: "sports"
